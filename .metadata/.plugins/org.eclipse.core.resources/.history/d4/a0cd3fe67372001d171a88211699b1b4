package br.com.alexsandro.gamepebolim.players;

import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;

import br.com.alexsandro.gamepebolim.Game;

public class Ball extends Entity {

	public int width, height;
	public static boolean up = true, down = false, left = false, right = false, movedUp = true, movedDown;
	public static double maxX = 83, maxY = 85, minX = 13, minY = 27.5;
	public static boolean ballUp = Game.rand.nextBoolean();
	public static boolean ballRight = Game.rand2.nextBoolean();
	public static boolean ballDown =! Game.rand.nextBoolean();
	public static boolean ballLeft =! Game.rand2.nextBoolean();
	public static boolean running = true;
	public static boolean isGoal = false;
	public static double speed = 1;
	public static double time;
	
	public static BufferedImage ball;

	public Ball(int x, int y, int width, int height, BufferedImage sprite) {
		super(x, y, width, height, sprite);

		ball = Game.sprite.getSprite(0, 64, 16, 16);
	}

	public void tick() {
		
		
		if(isColliding((int)x,(int)y)) {
			ballUp = false;
			ballDown = false;
			ballRight = false;
			ballLeft = false;
		}
		
		System.out.println(ballUp);
		if (isGoal == true) {
			x = 48;
			y = 56;
			isGoal = false;
		}
		// Rever essa lógica > Colisão da Bola com o Player - Lembrar de usar as
		// variávies center,right e left.
		// System.out.println("Ball" + x);
		// System.out.println("Player"+TeamA.newX);
		// System.out.println(y);
		// System.out.println(TeamA.newY);

		// Dica : trocar o x+=7 por uma variável boolean que enquanto estiver true =
		// x++;
		for (int i = 0; i < Game.teamA.length; i++) {
			if (TeamA.left == true && x <= Game.teamA[i].x+2 && x >= Game.teamA[i].x-2) {
				this.x += speed;
				System.out.println("Aqui");
				running = true;
			}
		}

			if (ballUp == true && ballLeft == true && !isColliding((int) x, (int) y)) {

				y -= speed;
				x -= speed;

				if (x <= 11 && y > 47 && y < 65) {
					x -= speed * 2;
					isGoal = true;
					TeamA.gol++;
					x--;
					ballRight = true;
				}

				if (y <= 26) {
					ballDown = true;
				}

				if (x <= 11) {
					ballRight = true;
				}

			}
			if (ballDown == true && ballRight == true && !isColliding((int) x, (int) y)) {
				y += speed;
				x += speed;

				if (x >= 85 && y > 47 && y < 65) {
					x += speed * 2;
					isGoal = true;
					TeamB.gol++;
					x++;
					ballLeft = true;
				}

				if (y >= 85) {
					ballUp = true;
				}

				if (x >= 85) {
					ballLeft = true;
				}

			}
			if (ballDown == true && ballLeft == true && !isColliding((int) x, (int) y)) {
				y += speed;
				x -= speed;

				if (x <= 11 && y > 47 && y < 65) {
					x -= speed * 2;
					isGoal = true;
					TeamA.gol++;
					x--;
					ballRight = true;
				}

				if (y >= 85) {
					ballUp = true;
				}

				if (x <= 11) {
					ballRight = true;
				}

			}
			if (ballUp == true && ballRight == true && !isColliding((int) x, (int) y)) {
				y -= speed;
				x += speed;

				if (x >= 85 && y > 47 && y < 65) {
					x += speed * 2;
					isGoal = true;
					TeamB.gol++;
					x++;
					ballLeft = true;
				}

				if (y <= 26) {
					ballDown = true;

				}

				if (x >= 85) {
					ballLeft = true;
				}
			}

			/*
			 * time += speed; System.out.println(time); if (time >= 6) {
			 * 
			 * running = false;
			 * 
			 * }
			 */
		
	}

	public boolean isColliding(int xnext, int ynext) {

		Rectangle playerCurrent = new Rectangle(xnext, ynext, 3, 3);

		for (int i = 0; i < Game.teamA.length; i++) {
			TeamA tA = Game.teamA[i];
			Rectangle targetPlayer = new Rectangle(tA.getX(), tA.getY(), 3, 3);
			if (playerCurrent.intersects(targetPlayer)) {
				return true;
			}

		}

		for (int i = 0; i < Game.teamB.length; i++) {
			TeamB tB = Game.teamB[i];
			Rectangle targetPlayer = new Rectangle(tB.getX(), tB.getY(), 3, 3);
			if (playerCurrent.intersects(targetPlayer)) {
				return true;
			}

		}

		GoalkeeperA gA = Game.keeperA;
		Rectangle targetKeeperA = new Rectangle(gA.getX(), gA.getY(), 3, 3);
		if (playerCurrent.intersects(targetKeeperA)) {
			return true;
		}

		GoalkeeperB gB = Game.keeperB;
		Rectangle targetKeeperB = new Rectangle(gB.getX(), gB.getY(), 3, 3);
		if (playerCurrent.intersects(targetKeeperB)) {
			return true;
		}

		return false;
	}

	public void render(Graphics g) {
		g.drawImage(Ball.ball, this.getX(), this.getY(), null);
	}

}
