package br.com.alexsandro.gamepebolim;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;

import br.com.alexsandro.gamepebolim.field.Field;
import br.com.alexsandro.gamepebolim.players.Entity;
import br.com.alexsandro.gamepebolim.players.Player;
import br.com.alexsandro.gamepebolim.sprites.Sprites;

public class Game extends Canvas implements Runnable, KeyListener {

	private static final long serialVersionUID = 1L;
	public static int WIDTH = 112;
	public static int HEIGHT = 112;
	public static int SCALE = 8;

	public BufferedImage layer = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
	private boolean isRunning = true;
	public Player player[] = new Player[18];
	public Player ball;

	private BufferedImage image;

	public List<Entity> entities;
	public static Sprites sprite;
	public static Field field;

	public Game() {
		this.setPreferredSize(new Dimension(WIDTH * SCALE, HEIGHT * SCALE));
		this.addKeyListener(this);

		image = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
		entities = new ArrayList<Entity>();
		sprite = new Sprites("/SpritesPebolim.png");
		field = new Field("/map.png");
		ball = new Player(48, 56, 16, 16, sprite.getSprite(0, 64, 16, 16));

		entities.add(ball);
		// Goleiros A e B
		entities.add(player[0] = new Player(85, 56, 16, 16, sprite.getSprite(32, 32, 16, 16)));
		entities.add(player[17] = new Player(11, 56, 16, 16, sprite.getSprite(32, 48, 16, 16)));

		// Defensores A
		entities.add(player[1] = new Player(30, 75, 16, 16, sprite.getSprite(32, 48, 16, 16)));
		entities.add(player[2] = new Player(30, 57, 16, 16, sprite.getSprite(32, 48, 16, 16)));
		entities.add(player[3] = new Player(30, 39, 16, 16, sprite.getSprite(32, 48, 16, 16)));

		// Meias A
		entities.add(player[4] = new Player(54, 75, 16, 16, sprite.getSprite(32, 48, 16, 16)));
		entities.add(player[5] = new Player(54, 57, 16, 16, sprite.getSprite(32, 48, 16, 16)));
		entities.add(player[6] = new Player(54, 39, 16, 16, sprite.getSprite(32, 48, 16, 16)));

		// Atacantes A
		entities.add(player[7] = new Player(78, 66, 16, 16, sprite.getSprite(32, 48, 16, 16)));
		entities.add(player[8] = new Player(78, 48, 16, 16, sprite.getSprite(32, 48, 16, 16)));

		// Defensores B
		entities.add(player[16] = new Player(66, 75, 16, 16, sprite.getSprite(32, 0, 16, 16)));
		entities.add(player[15] = new Player(66, 57, 16, 16, sprite.getSprite(32, 0, 16, 16)));
		entities.add(player[14] = new Player(66, 39, 16, 16, sprite.getSprite(32, 0, 16, 16)));

		// Meias B
		entities.add(player[13] = new Player(42, 75, 16, 16, sprite.getSprite(32, 0, 16, 16)));
		entities.add(player[12] = new Player(42, 57, 16, 16, sprite.getSprite(32, 0, 16, 16)));
		entities.add(player[11] = new Player(42, 39, 16, 16, sprite.getSprite(32, 0, 16, 16)));

		// Atacantes B
		entities.add(player[10] = new Player(18, 66, 16, 16, sprite.getSprite(32, 0, 16, 16)));
		entities.add(player[9] = new Player(18, 48, 16, 16, sprite.getSprite(32, 0, 16, 16)));

		
	}

	public static void main(String[] args) {
		Game game = new Game();
		JFrame frame = new JFrame("Pebolim");
		frame.setResizable(false);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.add(game);
		frame.pack();
		frame.setLocationRelativeTo(null);
		frame.setVisible(true);

		new Thread(game).start();

	}

	// Atualizar o jogo
	public void tick() {

		for (int i = 0; i < entities.size(); i++) {
			Entity e = entities.get(i);

			e.tick();
		}
	}

	// Renderizar o jogo
	public void render() {

		BufferStrategy bs = this.getBufferStrategy();
		if (bs == null) {
			this.createBufferStrategy(3);
			return;
		}
		Graphics g = image.getGraphics();
		g.setColor(new Color(0, 255, 0));
		g.fillRect(0, 0, WIDTH, HEIGHT);

		field.render(g);
		for (int i = 0; i < entities.size(); i++) {
			Entity e = entities.get(i);
			e.render(g);
		}
		
		if(player[0].left == true) {
			player[0] = new Player (85,56,16,16,sprite.getSprite(0,32,16,16));
			
		}else if(player[0].right == true) {
			
		}

		g.setFont(new Font("Arial", Font.BOLD, 10));
		Color font = new Color(255, 255, 255);
		g.setColor(font);
		g.drawString("Team A 1", 10, 12);
		g.drawString("2 Team B", 60, 12);
		g.drawString(" : ", 53, 12);

		g.dispose();
		g = bs.getDrawGraphics();
		g.drawImage(image, 0, 0, WIDTH * SCALE, HEIGHT * SCALE, null);
		bs.show();

	}

	@Override
	public void run() {
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		int frames = 0;
		double timer = System.currentTimeMillis();
		while (isRunning) {
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			if (delta >= 1) {
				tick();
				render();
				frames++;
				delta--;
			}

			if (System.currentTimeMillis() - timer >= 1000) {
				System.out.println("FPS: " + frames);
				frames = 0;
				timer += 1000;
			}
		}

	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyPressed(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_W) {

			player[1].up = true;
			player[2].up = true;
			player[3].up = true;

		} else if (e.getKeyCode() == KeyEvent.VK_S) {

			player[1].down = true;
			player[2].down = true;
			player[3].down = true;

		} else if (e.getKeyCode() == KeyEvent.VK_E) {

			player[4].up = true;
			player[5].up = true;
			player[6].up = true;

		} else if (e.getKeyCode() == KeyEvent.VK_D) {

			player[4].down = true;
			player[5].down = true;
			player[6].down = true;

		} else if (e.getKeyCode() == KeyEvent.VK_R) {

			player[7].up = true;
			player[8].up = true;

		} else if (e.getKeyCode() == KeyEvent.VK_F) {

			player[7].down = true;
			player[8].down = true;

		} else if (e.getKeyCode() == KeyEvent.VK_U) {
			player[9].up = true;
			player[10].up = true;
		} else if (e.getKeyCode() == KeyEvent.VK_J) {
			player[9].down = true;
			player[10].down = true;
		} else if (e.getKeyCode() == KeyEvent.VK_I) {
			player[11].up = true;
			player[12].up = true;
			player[13].up = true;
		} else if (e.getKeyCode() == KeyEvent.VK_K) {
			player[11].down = true;
			player[12].down = true;
			player[13].down = true;
		} else if (e.getKeyCode() == KeyEvent.VK_O) {
			player[14].up = true;
			player[15].up = true;
			player[16].up = true;
		} else if (e.getKeyCode() == KeyEvent.VK_L) {
			player[14].down = true;
			player[15].down = true;
			player[16].down = true;
		} else if (e.getKeyCode() == KeyEvent.VK_A) {
			player[0].left = true;
			player[15].left = true;
			player[16].left = true;
		} else if (e.getKeyCode() == KeyEvent.VK_Z) {
			player[0].right = true;
			player[15].right = true;
			player[16].right = true;
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		if (e.getKeyCode() == KeyEvent.VK_W) {
			player[1].up = false;
			player[2].up = false;
			player[3].up = false;

		} else if (e.getKeyCode() == KeyEvent.VK_S) {
			player[1].down = false;
			player[2].down = false;
			player[3].down = false;

		} else if (e.getKeyCode() == KeyEvent.VK_E) {
			System.out.println("Baixo");
			player[4].up = false;
			player[5].up = false;
			player[6].up = false;

		} else if (e.getKeyCode() == KeyEvent.VK_D) {
			System.out.println("Baixo");
			player[4].down = false;
			player[5].down = false;
			player[6].down = false;

		} else if (e.getKeyCode() == KeyEvent.VK_R) {
			System.out.println("Baixo");
			player[7].up = false;
			player[8].up = false;

		} else if (e.getKeyCode() == KeyEvent.VK_F) {
			System.out.println("Baixo");
			player[7].down = false;
			player[8].down = false;
		} else if (e.getKeyCode() == KeyEvent.VK_U) {
			player[9].up = false;
			player[10].up = false;
		} else if (e.getKeyCode() == KeyEvent.VK_J) {
			player[9].down = false;
			player[10].down = false;
		} else if (e.getKeyCode() == KeyEvent.VK_I) {
			player[11].up = false;
			player[12].up = false;
			player[13].up = false;
		} else if (e.getKeyCode() == KeyEvent.VK_K) {
			player[11].down = false;
			player[12].down = false;
			player[13].down = false;
		} else if (e.getKeyCode() == KeyEvent.VK_O) {
			player[14].up = false;
			player[15].up = false;
			player[16].up = false;
		} else if (e.getKeyCode() == KeyEvent.VK_L) {
			player[14].down = false;
			player[15].down = false;
			player[16].down = false;
		}else if (e.getKeyCode() == KeyEvent.VK_A) {
			player[0].left = false;
			player[15].left = false;
			player[16].left = false;
		} else if (e.getKeyCode() == KeyEvent.VK_Z) {
			player[0].right = false;
			player[15].right = false;
			player[16].right = false;
		}

	}

}
